// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  fullName        String
  email           String   @unique
  phone           String?
  yearsExperience Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  skills            UserSkill[]
  cvUploads         CVUpload[]
  validationResults ValidationResult[]

  @@map("users")
}

model UserSkill {
  id              String   @id @default(cuid())
  userId          String
  skillName       String
  proficiencyLevel String? // 'beginner', 'intermediate', 'advanced', 'expert'
  createdAt       DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, skillName])
  @@map("user_skills")
}

model CVUpload {
  id         String   @id @default(cuid())
  userId     String
  fileName   String
  filePath   String
  fileSize   Int
  uploadedAt DateTime @default(now())
  createdAt  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cv_uploads")
}

model ValidationResult {
  id               String   @id @default(cuid())
  userId           String
  isValid          Boolean
  mismatchedFields Json     // Array of MismatchedField objects
  confidenceScore  Float
  validatedAt      DateTime @default(now())
  createdAt        DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("validation_results")
} 